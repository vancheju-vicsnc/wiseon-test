apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    metacloud.vicsnc.com/kind: ApplicationTemplate
    metacloud.vicsnc.com/resource: Application
    metacloud.vicsnc.com/resourceDef: application2-def
  name: template-application2
data:
  template: |
    apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: clone-build-push-run-
    spec:
      pipelineRef:
        name: clone-build-push
      podTemplate:
        securityContext:
          fsGroup: 65532
      workspaces:
        - name: shared-data
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Gi
        #- name: git-credentials
        #  secret:
        #    secretName: git-credentials
        - name: docker-credentials
          secret:
            secretName: docker-credentials
        - name: basic-auth-credentials
          secret:
            secretName: basic-auth-credentials
        - name: kubeconfig-dir
          secret:
            secretName: kubeconfig
        - name: manifest-dir
          configMap:
            name: manifest
      params:
        - name: repo-url
          #value: git@github.com:vancheju-vicsnc/wiseon-test.git
          value: https://github.com/vancheju-vicsnc/wiseon-test.git
        - name: revision
          value: main
        - name: image-reference
          # GCR
          #value: gcr.io/devopscloud-376706/wiseon-test:v0.4
          # Docker
          value: vancheju2vicsnc/wiseon-test:v0.4
        - name: script
          value: |
            kubectl apply -f - <<EOF
              apiVersion: v1
              kind: ConfigMap
              metadata:
                labels:
                  metacloud.vicsnc.com/kind: ApplicationTemplate
                  metacloud.vicsnc.com/resource: Application
                  metacloud.vicsnc.com/resourceDef: application-def
                name: template-application
              data:
                template: |
    {% if container.imagePullSecret.enabled %}
    {% if container.imagePullSecret.type == 'gcr' %}
    {% set auth=_json_key:{{ container.imagePullSecret.gcr.json }} %}
    {% set dockerconfig='{ "auths":{ "gcr.io":{ "username": "_json_key", "password": "{{ container.imagePullSecret.gcr.json }}", "email": "{{ container.imagePullSecret.gcr.email }}", "auth": "{{ auth | b64encode }}" } } }' %}
    {% else %}
    {% set auth={{ container.imagePullSecret.docker.id }}:{{ container.imagePullSecret.docker.token }} %}
    {% set dockerconfig='{ "auths": { "https://index.docker.io/v1/": { "auth": "{{ auth | b64encode }}" } } }' %}
    {% endif %}
                  apiVersion: kubernetes.crossplane.io/v1alpha1
                  kind: Object
                  metadata:
                    name: imagepull-{{ name }}
                  spec:
                    providerConfigRef:
                      name: {{ cluster }}-kubernetes
                    forProvider:
                      manifest:
                        apiVersion: v1
                        kind: Secret
                        metadata:
                          name: imagepull-{{ name }}
                          namespace: {{ namespace }}
                        data:
                          .dockerconfigjson: {{ dockerconfig | b64encode }}
                        type: kubernetes.io/dockerconfigjson
                  ---
    {% endif %}
    {% for storage in storages %}
                  apiVersion: kubernetes.crossplane.io/v1alpha1
                  kind: Object
                  metadata:
                    name: pvc-{{ name }}-{{ loop.index0 }}
                  spec:
                    providerConfigRef:
                      name: {{ cluster }}-kubernetes
                    forProvider:
                      manifest:
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          name: pvc-{{ name }}-{{ loop.index0 }}
                          namespace: {{ namespace }}
                        spec:
                          accessModes:
                            - ReadWriteOnce
                          storageClassName: {{ storage.storageClass }}
                          resources:
                            requests:
                              storage: {{ storage.size }}
                  ---
    {% endfor %}
                  apiVersion: kubernetes.crossplane.io/v1alpha1
                  kind: Object
                  metadata:
                    name: deploy-{{ name }}
                  spec:
                    providerConfigRef:
                      name: {{ cluster }}-kubernetes
                    forProvider:
                      manifest:
                        apiVersion: apps/v1
                        kind: Deployment
                        metadata:
                          labels:
                            app: {{ name }}
                          namespace: {{ namespace }}
                          name: {{ name }}
                        spec:
                          replicas: {{ resource.replica }}
                          selector:
                            matchLabels:
                              app: {{ name }}
                          template:
                            metadata:
                              labels:
                                app: {{ name }}
                            spec:
                              containers:
                                - name: {{ name }}
                                  image: {{ container.registry }}/{{ container.repository }}:{{ container.tag }}
                                  resouces:
                                    request:
                                      cpu: {{ resource.cpu }}
                                      memory: {{ resource.memory }}
                                  ports:
    {% for applicationPort, externalPort in ports|groupby("applicationPort") %}
                                    - containerPort: {{ applicationPort|int() }}
    {% endfor %}
                                  volumeMounts:
    {% for storage in storages %}
                                    - mountPath: {{ storage.path }}
                                      name: pvc-{{ name }}-{{ loop.index0 }}
    {% endfor %}
    {% if container.imagePullSecret.enabled %}
                              imagePullSecrets:
                                - name: imagepull-{{ name }}
    {% endif %}
                              volumes:
    {% for storage in storages %}
                                - name: pvc-{{ name }}-{{ loop.index0 }}
                                  persistentVolumeClaim:
                                    claimName: pvc-{{ name }}-{{ loop.index0 }}
    {% endfor %}
    {% for port in ports %}
                  ---
                  apiVersion: kubernetes.crossplane.io/v1alpha1
                  kind: Object
                  metadata:
                    name: svc-{{ name }}-{{ loop.index0 }}
                  spec:
                    providerConfigRef:
                      name: {{ cluster }}-kubernetes
                    forProvider:
                      manifest:
                        apiVersion: v1
                        kind: Service
                        metadata:
                          labels:
                            app: {{ name }}
                          namespace: {{ namespace }}
                          name: svc-{{ name }}-{{ loop.index0 }}
                        spec:
    {% if port.isPublic %}
                          type: LoadBalancer
    {% else %}
                          type: ClusterIP
    {% endif %}
                          ports:
                            - port: {{ port.externalPort|int() }}
                              protocol: TCP
                              targetPort: {{ port.applicationPort|int() }}
                          selector:
                            app: {{ name }}
    {% endfor %}
            EOF
